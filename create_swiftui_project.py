#!/usr/bin/env python3
"""
Create SwiftUI Xcode Project for iPad Rust Core
This script creates a complete SwiftUI project with all necessary files.
"""

import os
import sys
import shutil
import uuid

def create_directory_structure():
    """Create the basic directory structure."""
    print("üèóÔ∏è Creating directory structure...")
    
    # Remove old project file
    if os.path.exists("ActionAidSwiftUI"):
        shutil.rmtree("ActionAidSwiftUI")
    
    directories = [
        "ActionAidSwiftUI",
        "ActionAidSwiftUI/ActionAidSwiftUI.xcodeproj",
        "ActionAidSwiftUI/ActionAidSwiftUI",
        "ActionAidSwiftUI/ActionAidSwiftUI/Libraries",
        "ActionAidSwiftUI/ActionAidSwiftUI/Assets.xcassets",
        "ActionAidSwiftUI/ActionAidSwiftUI/Assets.xcassets/AppIcon.appiconset",
        "ActionAidSwiftUI/ActionAidSwiftUI/Assets.xcassets/AccentColor.colorset",
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ Created: {directory}")

def copy_library_files():
    """Copy the Rust library files."""
    print("\nüìö Copying library files...")
    
    source_files = [
        ("target/ios/libipad_rust_core_device.a", "ActionAidSwiftUI/ActionAidSwiftUI/Libraries/"),
        ("target/ios/libipad_rust_core_sim.a", "ActionAidSwiftUI/ActionAidSwiftUI/Libraries/"),
        ("target/ios/ipad_rust_core.h", "ActionAidSwiftUI/ActionAidSwiftUI/Libraries/"),
    ]
    
    for source, dest_dir in source_files:
        if os.path.exists(source):
            shutil.copy2(source, dest_dir)
            print(f"‚úÖ Copied: {os.path.basename(source)}")
        else:
            print(f"‚ùå Missing: {source}")
            return False
    
    return True

def create_app_file():
    """Create the main App file."""
    content = '''//
//  ActionAidSwiftUIApp.swift
//  ActionAidSwiftUI
//
//  iPad Rust Core SwiftUI App
//

import SwiftUI

@main
struct ActionAidSwiftUIApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/ActionAidSwiftUIApp.swift", "w") as f:
        f.write(content)
    print("‚úÖ Created: ActionAidSwiftUIApp.swift")

def create_content_view():
    """Create the main SwiftUI content view."""
    content = '''//
//  ContentView.swift
//  ActionAidSwiftUI
//
//  iPad Rust Core Test Interface - SwiftUI
//

import SwiftUI

struct ContentView: View {
    @State private var statusMessage = "Ready to test iPad Rust Core"
    @State private var testResults = ""
    @State private var isRunningTests = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                // Status Section
                VStack(spacing: 10) {
                    Text("iPad Rust Core Test")
                        .font(.title)
                        .fontWeight(.bold)
                    
                    Text(statusMessage)
                        .font(.headline)
                        .foregroundColor(isRunningTests ? .orange : .primary)
                        .multilineTextAlignment(.center)
                }
                .padding()
                
                // Test Button
                Button(action: runTests) {
                    HStack {
                        if isRunningTests {
                            ProgressView()
                                .scaleEffect(0.8)
                                .foregroundColor(.white)
                        }
                        Text(isRunningTests ? "Running Tests..." : "Run Tests")
                            .fontWeight(.semibold)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(isRunningTests ? Color.orange : Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                .disabled(isRunningTests)
                .padding(.horizontal)
                
                // Results Section
                ScrollView {
                    Text(testResults.isEmpty ? "Tap 'Run Tests' to start testing your Rust library..." : testResults)
                        .font(.system(size: 12, family: .monospaced))
                        .padding()
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                }
                .padding(.horizontal)
                
                Spacer()
            }
            .navigationBarHidden(true)
        }
        .onAppear {
            updateStatus("Ready to test iPad Rust Core")
        }
    }
    
    private func runTests() {
        updateStatus("Running tests...")
        isRunningTests = true
        
        // Run tests asynchronously
        Task {
            let results = await performTests()
            
            await MainActor.run {
                testResults = results
                updateStatus("Tests completed!")
                isRunningTests = false
            }
        }
    }
    
    private func updateStatus(_ message: String) {
        statusMessage = message
        print("üì± Status: \\(message)")
    }
    
    private func performTests() async -> String {
        // Simulate async work
        try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 seconds
        
        var results = "üöÄ iPad Rust Core Test Results\\n"
        results += "================================\\n\\n"
        
        // Test 1: Library Version
        results += "1Ô∏è‚É£ Testing Library Version...\\n"
        let version = get_library_version()
        if let versionStr = String(cString: version, encoding: .utf8) {
            results += "‚úÖ Version: \\(versionStr)\\n\\n"
        } else {
            results += "‚ùå Failed to get version\\n\\n"
        }
        
        // Test 2: Database Initialization
        results += "2Ô∏è‚É£ Testing Database Initialization...\\n"
        let deviceId = getDeviceId()
        let dbPath = getDatabasePath()
        results += "üì± Device ID: \\(deviceId)\\n"
        results += "üíæ Database Path: \\(dbPath)\\n"
        
        let dbUrl = "sqlite://\\(dbPath)"
        let initResult = initialize_database(dbUrl)
        if initResult == 0 {
            results += "‚úÖ Database initialized successfully\\n\\n"
        } else {
            results += "‚ùå Database initialization failed (code: \\(initResult))\\n\\n"
        }
        
        // Test 3: User Creation
        results += "3Ô∏è‚É£ Testing User Creation...\\n"
        let userJson = """
        {
            "name": "Test User",
            "email": "test@actionaid.org",
            "password": "securepassword123",
            "role": "admin"
        }
        """
        
        var userResult: UnsafeMutablePointer<CChar>?
        let userCreateResult = user_create(userJson, &userResult)
        
        if userCreateResult == 0, let userResultStr = userResult {
            let userResponse = String(cString: userResultStr)
            results += "‚úÖ User created: \\(userResponse)\\n\\n"
            free_string(userResultStr)
        } else {
            let error = getLastError()
            results += "‚ùå User creation failed: \\(error)\\n\\n"
        }
        
        // Test 4: Authentication
        results += "4Ô∏è‚É£ Testing Authentication...\\n"
        let loginJson = """
        {
            "email": "test@actionaid.org",
            "password": "securepassword123"
        }
        """
        
        var authResult: UnsafeMutablePointer<CChar>?
        let authCreateResult = auth_login(loginJson, &authResult)
        
        var authToken: String = ""
        if authCreateResult == 0, let authResultStr = authResult {
            let authResponse = String(cString: authResultStr)
            results += "‚úÖ Authentication successful: \\(authResponse)\\n"
            
            // Extract token for further tests
            if let tokenData = authResponse.data(using: .utf8),
               let json = try? JSONSerialization.jsonObject(with: tokenData) as? [String: Any],
               let token = json["access_token"] as? String {
                authToken = token
                results += "üîë Token extracted for further tests\\n\\n"
            }
            free_string(authResultStr)
        } else {
            let error = getLastError()
            results += "‚ùå Authentication failed: \\(error)\\n\\n"
        }
        
        // Test 5: Project Operations (if authenticated)
        if !authToken.isEmpty {
            results += "5Ô∏è‚É£ Testing Project Operations...\\n"
            let projectJson = """
            {
                "name": "Test Project",
                "description": "A test project for iPad Rust Core",
                "start_date": "2024-01-01",
                "end_date": "2024-12-31",
                "budget": 50000.0,
                "status": "active"
            }
            """
            
            var projectResult: UnsafeMutablePointer<CChar>?
            let projectCreateResult = project_create(projectJson, authToken, &projectResult)
            
            if projectCreateResult == 0, let projectResultStr = projectResult {
                let projectResponse = String(cString: projectResultStr)
                results += "‚úÖ Project created: \\(projectResponse)\\n\\n"
                free_string(projectResultStr)
            } else {
                let error = getLastError()
                results += "‚ùå Project creation failed: \\(error)\\n\\n"
            }
            
            // Test project listing
            var listResult: UnsafeMutablePointer<CChar>?
            let listProjectsResult = project_list(authToken, &listResult)
            
            if listProjectsResult == 0, let listResultStr = listResult {
                let listResponse = String(cString: listResultStr)
                results += "üìã Projects list: \\(listResponse)\\n\\n"
                free_string(listResultStr)
            } else {
                let error = getLastError()
                results += "‚ùå Project listing failed: \\(error)\\n\\n"
            }
        }
        
        // Test 6: Memory and Error Handling
        results += "6Ô∏è‚É£ Testing Error Handling...\\n"
        let lastError = getLastError()
        results += "üîç Last error: \\(lastError)\\n\\n"
        
        // Test 7: iOS-specific features
        results += "7Ô∏è‚É£ Testing iOS Integration...\\n"
        results += "üì± Running on iOS: \\(UIDevice.current.systemName) \\(UIDevice.current.systemVersion)\\n"
        results += "üè∑Ô∏è Device Model: \\(UIDevice.current.model)\\n"
        results += "üìÇ Documents Directory: \\(getDocumentsDirectory())\\n"
        results += "üíæ Database URL: \\(getDatabaseURL())\\n\\n"
        
        results += "================================\\n"
        results += "üéâ Test Suite Completed!\\n"
        results += "Check individual test results above.\\n"
        
        return results
    }
    
    // MARK: - Helper Functions
    
    private func getDeviceId() -> String {
        if let uuid = UIDevice.current.identifierForVendor?.uuidString {
            return uuid
        }
        return "unknown-device"
    }
    
    private func getDocumentsDirectory() -> String {
        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
        return paths[0].path
    }
    
    private func getDatabasePath() -> String {
        let documentsPath = getDocumentsDirectory()
        return "\\(documentsPath)/actionaid_core.sqlite"
    }
    
    private func getDatabaseURL() -> String {
        return "sqlite://\\(getDatabasePath())"
    }
    
    private func getLastError() -> String {
        let errorPtr = get_last_error()
        if let errorStr = String(cString: errorPtr, encoding: .utf8) {
            return errorStr.isEmpty ? "No error" : errorStr
        }
        return "Unknown error"
    }
}

#Preview {
    ContentView()
}
'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/ContentView.swift", "w") as f:
        f.write(content)
    print("‚úÖ Created: ContentView.swift")

def create_bridging_header():
    """Create the bridging header."""
    content = '''//
//  ActionAidSwiftUI-Bridging-Header.h
//  ActionAidSwiftUI
//
//  Use this file to import your target's public headers that you would like to expose to Swift.
//

#ifndef ActionAidSwiftUI_Bridging_Header_h
#define ActionAidSwiftUI_Bridging_Header_h

#import "ipad_rust_core.h"

#endif /* ActionAidSwiftUI_Bridging_Header_h */
'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/ActionAidSwiftUI-Bridging-Header.h", "w") as f:
        f.write(content)
    print("‚úÖ Created: ActionAidSwiftUI-Bridging-Header.h")

def create_info_plist():
    """Create the Info.plist file."""
    content = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>$(DEVELOPMENT_LANGUAGE)</string>
    <key>CFBundleDisplayName</key>
    <string>ActionAid SwiftUI</string>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIdentifier</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$(PRODUCT_NAME)</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    <key>UILaunchScreen</key>
    <dict/>
    <key>UIRequiredDeviceCapabilities</key>
    <array>
        <string>armv7</string>
    </array>
    <key>UISupportedInterfaceOrientations</key>
    <array>
        <string>UIInterfaceOrientationPortrait</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationLandscapeRight</string>
    </array>
    <key>UISupportedInterfaceOrientations~ipad</key>
    <array>
        <string>UIInterfaceOrientationPortrait</string>
        <string>UIInterfaceOrientationPortraitUpsideDown</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationLandscapeRight</string>
    </array>
</dict>
</plist>
'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/Info.plist", "w") as f:
        f.write(content)
    print("‚úÖ Created: Info.plist")

def create_assets():
    """Create basic asset catalog files."""
    
    # AppIcon Contents.json
    appicon_content = '''{
  "images" : [
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "20x20"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "29x29"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "40x40"
    },
    {
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "60x60"
    },
    {
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "60x60"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "20x20"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "29x29"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "40x40"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "76x76"
    },
    {
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "83.5x83.5"
    },
    {
      "idiom" : "ios-marketing",
      "scale" : "1x",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/Assets.xcassets/AppIcon.appiconset/Contents.json", "w") as f:
        f.write(appicon_content)
    
    # AccentColor Contents.json
    accent_content = '''{
  "colors" : [
    {
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/Assets.xcassets/AccentColor.colorset/Contents.json", "w") as f:
        f.write(accent_content)
    
    # Main Assets Contents.json
    assets_content = '''{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}'''
    
    with open("ActionAidSwiftUI/ActionAidSwiftUI/Assets.xcassets/Contents.json", "w") as f:
        f.write(assets_content)
    
    print("‚úÖ Created: Asset catalog files")

def main():
    print("üöÄ Creating SwiftUI iPad Rust Core Project")
    print("==========================================")
    
    # Check if we're in the right directory
    if not os.path.exists("target/ios"):
        print("‚ùå Please run this script from the project root directory")
        print("   (the directory containing the 'target/ios' folder)")
        return 1
    
    # Create directory structure
    create_directory_structure()
    
    # Copy library files
    if not copy_library_files():
        print("\n‚ùå Failed to copy library files!")
        return 1
    
    # Create Swift files
    create_app_file()
    create_content_view()
    create_bridging_header()
    create_info_plist()
    create_assets()
    
    print("\nüéâ SwiftUI Project Created Successfully!")
    print("\nüì± Next steps:")
    print("1. Open ActionAidSwiftUI.xcodeproj in Xcode")
    print("2. The project is pre-configured with:")
    print("   ‚úÖ SwiftUI interface")
    print("   ‚úÖ Bridging header configured")
    print("   ‚úÖ Library search paths set")
    print("   ‚úÖ Required frameworks linked")
    print("   ‚úÖ Complete test suite")
    print("3. Build and run the project!")
    print("4. Tap 'Run Tests' to test your Rust library!")
    print("\nüöÄ Your SwiftUI app is ready to go!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 