-- Combined Final SQLite Schema
-- Generated based on migrations up to April 24, 2025

PRAGMA foreign_keys = ON;

-- Use TEXT for Timestamps to store ISO8601 format with precision
-- Example: 'YYYY-MM-DDTHH:MM:SS.sssZ' (UTC is generally recommended for sync)

-- ----------- Users Table -----------
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY, -- UUID

    email TEXT NOT NULL UNIQUE,
    email_updated_at TEXT,            -- Field timestamp (ISO8601 UTC preferably)
    email_updated_by TEXT,            -- Field author (user_id)

    password_hash TEXT NOT NULL,
    -- password_hash_updated_at: Not typically needed for LWW sync

    name TEXT NOT NULL,
    name_updated_at TEXT,
    name_updated_by TEXT,

    -- Assuming 'field_tl' is a valid role now for locking
    role TEXT NOT NULL CHECK (role IN ('admin', 'field_tl', 'field')),
    role_updated_at TEXT,
    role_updated_by TEXT,

    last_login TEXT DEFAULT NULL,
    -- last_login_updated_at: Info only, not for LWW merge usually

    active INTEGER NOT NULL DEFAULT 1, -- 1=true, 0=false
    active_updated_at TEXT,
    active_updated_by TEXT,

    -- Core Timestamps/Authorship for the record itself
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- ISO8601 UTC
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- Main record timestamp (reflects the latest field update time)
    created_by_user_id TEXT, -- User who created this user record
    updated_by_user_id TEXT, -- User who last touched any field on this record

    -- Optional Soft Delete fields (can also be inferred from 'delete' in change_log)
    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (email_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (name_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (role_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (active_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Status Types (Lookup Table - Now Syncable) -----------
CREATE TABLE IF NOT EXISTS status_types (
    id INTEGER PRIMARY KEY AUTOINCREMENT, -- Local immutable ID

    value TEXT NOT NULL UNIQUE,
    value_updated_at TEXT,            -- Timestamp for value change
    value_updated_by TEXT,            -- User who changed the value

    -- Core sync metadata
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When this status was added
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When value last changed or record soft deleted/undeleted
    created_by_user_id TEXT, -- User who added this status
    updated_by_user_id TEXT, -- User who last touched this record

    deleted_at TEXT DEFAULT NULL, -- If status types can be removed
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (value_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Strategic Goals -----------
CREATE TABLE IF NOT EXISTS strategic_goals (
    id TEXT PRIMARY KEY, -- UUID

    objective_code TEXT NOT NULL,
    objective_code_updated_at TEXT,
    objective_code_updated_by TEXT,

    outcome TEXT,
    outcome_updated_at TEXT,
    outcome_updated_by TEXT,

    kpi TEXT,
    kpi_updated_at TEXT,
    kpi_updated_by TEXT,

    target_value REAL,
    target_value_updated_at TEXT,
    target_value_updated_by TEXT,

    actual_value REAL DEFAULT 0,
    actual_value_updated_at TEXT,
    actual_value_updated_by TEXT,

    status_id INTEGER,
    status_id_updated_at TEXT,
    status_id_updated_by TEXT,

    responsible_team TEXT,
    responsible_team_updated_at TEXT,
    responsible_team_updated_by TEXT,

    sync_priority INTEGER NOT NULL DEFAULT 1, -- Added in 2024-04-21 migration

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (status_id) REFERENCES status_types(id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (objective_code_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (outcome_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (kpi_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (target_value_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (actual_value_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (status_id_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (responsible_team_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Projects Table -----------
CREATE TABLE IF NOT EXISTS projects (
    id TEXT PRIMARY KEY, -- UUID
    strategic_goal_id TEXT NULL, -- Made NULLable in nullable FK migration

    name TEXT NOT NULL,
    name_updated_at TEXT,
    name_updated_by TEXT,

    objective TEXT,
    objective_updated_at TEXT,
    objective_updated_by TEXT,

    outcome TEXT,
    outcome_updated_at TEXT,
    outcome_updated_by TEXT,

    status_id INTEGER,
    status_id_updated_at TEXT,
    status_id_updated_by TEXT,

    timeline TEXT,
    timeline_updated_at TEXT,
    timeline_updated_by TEXT,

    responsible_team TEXT,
    responsible_team_updated_at TEXT,
    responsible_team_updated_by TEXT,

    sync_priority INTEGER NOT NULL DEFAULT 1, -- Added in 2024-04-21 migration

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (strategic_goal_id) REFERENCES strategic_goals(id) ON DELETE RESTRICT, -- Changed from CASCADE in 2025-04-04 migration
    FOREIGN KEY (status_id) REFERENCES status_types(id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (name_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (objective_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (outcome_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (status_id_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (timeline_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (responsible_team_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Activities Table -----------
CREATE TABLE IF NOT EXISTS activities (
    id TEXT PRIMARY KEY,
    project_id TEXT NULL, -- Made NULLable in nullable FK migration

    description TEXT,
    description_updated_at TEXT,
    description_updated_by TEXT,

    kpi TEXT,
    kpi_updated_at TEXT,
    kpi_updated_by TEXT,

    target_value REAL,
    target_value_updated_at TEXT,
    target_value_updated_by TEXT,

    actual_value REAL DEFAULT 0,
    actual_value_updated_at TEXT,
    actual_value_updated_by TEXT,

    status_id INTEGER,
    status_id_updated_at TEXT,
    status_id_updated_by TEXT,

    -- sync_priority INTEGER NOT NULL DEFAULT 1; -- Consider adding if needed based on 2024-04-21 pattern

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE, -- Kept CASCADE as per nullable FK migration
    FOREIGN KEY (status_id) REFERENCES status_types(id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (description_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (kpi_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (target_value_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (actual_value_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (status_id_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Participants Table -----------
CREATE TABLE IF NOT EXISTS participants (
    id TEXT PRIMARY KEY, -- UUID

    name TEXT NOT NULL,
    name_updated_at TEXT,
    name_updated_by TEXT,

    gender TEXT,
    gender_updated_at TEXT,
    gender_updated_by TEXT,

    disability INTEGER DEFAULT 0, -- 0=false, 1=true
    disability_updated_at TEXT,
    disability_updated_by TEXT,

    disability_type TEXT DEFAULT NULL,
    disability_type_updated_at TEXT,
    disability_type_updated_by TEXT,

    age_group TEXT,
    age_group_updated_at TEXT,
    age_group_updated_by TEXT,

    location TEXT, -- Consider linking to locations table via location_id TEXT?
    location_updated_at TEXT,
    location_updated_by TEXT,

    sync_priority INTEGER NOT NULL DEFAULT 1, -- Added in 2024-04-21 migration

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (name_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (gender_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (disability_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (disability_type_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (age_group_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (location_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Workshops Table -----------
-- This table was heavily restructured in the nullable FK migration
CREATE TABLE IF NOT EXISTS workshops (
    id TEXT PRIMARY KEY,
    project_id TEXT NULL, -- Made NULLable in nullable FK migration
    title TEXT NOT NULL, -- Added in nullable FK migration
    title_updated_at TEXT,
    title_updated_by TEXT,
    objective TEXT, -- Added in nullable FK migration
    objective_updated_at TEXT,
    objective_updated_by TEXT,
    rationale TEXT, -- Added in nullable FK migration
    rationale_updated_at TEXT,
    rationale_updated_by TEXT,
    methodology TEXT, -- Added in nullable FK migration
    methodology_updated_at TEXT,
    methodology_updated_by TEXT,
    facilitator TEXT, -- Added in nullable FK migration
    facilitator_updated_at TEXT,
    facilitator_updated_by TEXT,
    event_date TEXT, -- Kept from initial schema
    event_date_updated_at TEXT,
    event_date_updated_by TEXT,
    start_time TEXT, -- Added in nullable FK migration
    start_time_updated_at TEXT,
    start_time_updated_by TEXT,
    end_time TEXT, -- Added in nullable FK migration
    end_time_updated_at TEXT,
    end_time_updated_by TEXT,
    location TEXT, -- Kept from initial schema
    location_updated_at TEXT,
    location_updated_by TEXT,
    total_male_participants INTEGER DEFAULT 0, -- Added in nullable FK migration
    total_male_participants_updated_at TEXT,
    total_male_participants_updated_by TEXT,
    total_female_participants INTEGER DEFAULT 0, -- Added in nullable FK migration
    total_female_participants_updated_at TEXT,
    total_female_participants_updated_by TEXT,
    total_other_participants INTEGER DEFAULT 0, -- Added in nullable FK migration
    total_other_participants_updated_at TEXT,
    total_other_participants_updated_by TEXT,

    sync_priority INTEGER NOT NULL DEFAULT 1, -- Added in 2024-04-21 migration

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,
    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE RESTRICT, -- Changed from CASCADE in 2025-04-04 migration
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (title_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (objective_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (rationale_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (methodology_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (facilitator_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (event_date_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (start_time_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (end_time_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (location_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (total_male_participants_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (total_female_participants_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (total_other_participants_updated_by) REFERENCES users(id) ON DELETE SET NULL
    -- Note: Many FKs from the initial schema referencing _updated_by for removed columns are gone.
);

-- ----------- Workshop Participants (Junction Table) -----------
-- Restructured in nullable FK migration, then added evaluation columns back in 2024-04-20 migration
CREATE TABLE IF NOT EXISTS workshop_participants (
    id TEXT PRIMARY KEY, -- Changed from INTEGER AUTOINCREMENT in 2024-04-20
    workshop_id TEXT NOT NULL, -- Made NOT NULL again in 2024-04-20
    participant_id TEXT NULL, -- Kept NULLable from nullable FK, changed ON DELETE in 2024-04-20

    notes TEXT, -- Added in nullable FK migration
    notes_updated_at TEXT,
    notes_updated_by TEXT,

    pre_evaluation TEXT, -- Added back in 2024-04-20
    pre_evaluation_updated_at TEXT,
    pre_evaluation_updated_by TEXT,

    post_evaluation TEXT, -- Added back in 2024-04-20
    post_evaluation_updated_at TEXT,
    post_evaluation_updated_by TEXT,

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (workshop_id) REFERENCES workshops(id) ON DELETE CASCADE, -- Changed from RESTRICT in 2024-04-20
    FOREIGN KEY (participant_id) REFERENCES participants(id) ON DELETE SET NULL, -- Changed from RESTRICT in 2024-04-20
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (notes_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (pre_evaluation_updated_by) REFERENCES users(id) ON DELETE SET NULL, -- Added back 2024-04-20
    FOREIGN KEY (post_evaluation_updated_by) REFERENCES users(id) ON DELETE SET NULL, -- Added back 2024-04-20

    UNIQUE(workshop_id, participant_id) ON CONFLICT REPLACE -- Added 2024-04-20
);

-- ----------- Livelihoods Table -----------
-- This table was heavily restructured in the nullable FK migration
CREATE TABLE IF NOT EXISTS livelihoods (
    id TEXT PRIMARY KEY,
    participant_id TEXT NULL, -- Made NULLable in nullable FK migration
    project_id TEXT NULL, -- Made NULLable in nullable FK migration
    type TEXT NOT NULL, -- Added in nullable FK migration
    type_updated_at TEXT,
    type_updated_by TEXT,
    description TEXT, -- Added in nullable FK migration
    description_updated_at TEXT,
    description_updated_by TEXT,
    status_id INTEGER, -- Added in nullable FK migration
    status_id_updated_at TEXT,
    status_id_updated_by TEXT,
    initial_grant_date TEXT, -- Added in nullable FK migration
    initial_grant_date_updated_at TEXT,
    initial_grant_date_updated_by TEXT,
    initial_grant_amount REAL, -- Added in nullable FK migration
    initial_grant_amount_updated_at TEXT,
    initial_grant_amount_updated_by TEXT,

    sync_priority INTEGER NOT NULL DEFAULT 1, -- Added in 2024-04-21 migration

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,
    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (participant_id) REFERENCES participants(id) ON DELETE RESTRICT, -- Changed from CASCADE in nullable FK migration
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE RESTRICT, -- Changed from CASCADE in 2025-04-04 migration
    FOREIGN KEY (status_id) REFERENCES status_types(id) ON DELETE RESTRICT, -- Added in nullable FK migration
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (type_updated_by) REFERENCES users(id) ON DELETE SET NULL, -- Added in nullable FK migration
    FOREIGN KEY (description_updated_by) REFERENCES users(id) ON DELETE SET NULL, -- Added in nullable FK migration
    FOREIGN KEY (status_id_updated_by) REFERENCES users(id) ON DELETE SET NULL, -- Added in nullable FK migration
    FOREIGN KEY (initial_grant_date_updated_by) REFERENCES users(id) ON DELETE SET NULL, -- Added in nullable FK migration
    FOREIGN KEY (initial_grant_amount_updated_by) REFERENCES users(id) ON DELETE SET NULL -- Added in nullable FK migration
    -- Note: Many FKs from the initial schema referencing _updated_by for removed columns are gone.
);

-- ----------- Subsequent Grants Table -----------
CREATE TABLE IF NOT EXISTS subsequent_grants (
    id TEXT PRIMARY KEY,
    livelihood_id TEXT NOT NULL,

    amount REAL,
    amount_updated_at TEXT,
    amount_updated_by TEXT,

    purpose TEXT,
    purpose_updated_at TEXT,
    purpose_updated_by TEXT,

    grant_date TEXT,
    grant_date_updated_at TEXT,
    grant_date_updated_by TEXT,

    sync_priority INTEGER NOT NULL DEFAULT 1, -- Added in 2024-04-21 migration

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (livelihood_id) REFERENCES livelihoods(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (amount_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (purpose_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (grant_date_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Donors Table -----------
CREATE TABLE IF NOT EXISTS donors (
    id TEXT PRIMARY KEY, -- UUID

    name TEXT NOT NULL,
    name_updated_at TEXT,
    name_updated_by TEXT,

    type TEXT, -- e.g., 'Individual', 'Foundation', 'Government', 'Corporate'
    type_updated_at TEXT,
    type_updated_by TEXT,

    contact_person TEXT,
    contact_person_updated_at TEXT,
    contact_person_updated_by TEXT,

    email TEXT,
    email_updated_at TEXT,
    email_updated_by TEXT,

    phone TEXT,
    phone_updated_at TEXT,
    phone_updated_by TEXT,

    country TEXT, -- Consider linking to locations table?
    country_updated_at TEXT,
    country_updated_by TEXT,

    first_donation_date TEXT, -- ISO date string
    first_donation_date_updated_at TEXT,
    first_donation_date_updated_by TEXT,

    notes TEXT,
    notes_updated_at TEXT,
    notes_updated_by TEXT,

    -- Core sync metadata
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT,
    updated_by_user_id TEXT,

    deleted_at TEXT DEFAULT NULL,
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (name_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (type_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (contact_person_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (email_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (phone_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (country_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (first_donation_date_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (notes_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Project Funding Table -----------
CREATE TABLE IF NOT EXISTS project_funding (
    id TEXT PRIMARY KEY, -- UUID for this specific funding record

    project_id TEXT NOT NULL,
    project_id_updated_at TEXT,      -- If funding can be re-assigned (less common)
    project_id_updated_by TEXT,

    donor_id TEXT NOT NULL,
    donor_id_updated_at TEXT,        -- If donor can be corrected
    donor_id_updated_by TEXT,

    grant_id TEXT,                   -- Reference number for the grant
    grant_id_updated_at TEXT,
    grant_id_updated_by TEXT,

    amount REAL,
    amount_updated_at TEXT,
    amount_updated_by TEXT,

    currency TEXT DEFAULT 'AUD',
    currency_updated_at TEXT,
    currency_updated_by TEXT,

    start_date TEXT,                 -- ISO date string 'YYYY-MM-DD'
    start_date_updated_at TEXT,
    start_date_updated_by TEXT,

    end_date TEXT,                   -- ISO date string 'YYYY-MM-DD'
    end_date_updated_at TEXT,
    end_date_updated_by TEXT,

    status TEXT,                     -- e.g., 'Committed', 'Received', 'Pending', 'Completed'
    status_updated_at TEXT,
    status_updated_by TEXT,

    reporting_requirements TEXT,
    reporting_requirements_updated_at TEXT,
    reporting_requirements_updated_by TEXT,

    notes TEXT,
    notes_updated_at TEXT,
    notes_updated_by TEXT,

    -- Core sync metadata
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When this funding record was created
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When any field on this record was last updated
    created_by_user_id TEXT, -- User who entered this funding record
    updated_by_user_id TEXT, -- User who last modified this funding record

    deleted_at TEXT DEFAULT NULL, -- If funding records can be soft-deleted
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE RESTRICT, -- Changed from CASCADE in 2025-04-04 migration
    FOREIGN KEY (donor_id) REFERENCES donors(id) ON DELETE RESTRICT, -- Don't delete donor if they have funding attached
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (project_id_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (donor_id_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (grant_id_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (amount_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (currency_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (start_date_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (end_date_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (status_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (reporting_requirements_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (notes_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Document Types Table (Syncable Configuration) -----------
CREATE TABLE IF NOT EXISTS document_types (
    id TEXT PRIMARY KEY, -- User-defined key, e.g., 'receipt', 'project_plan', 'photo_evidence'

    name TEXT NOT NULL,              -- Display name, e.g., "Receipt", "Project Plan"
    name_updated_at TEXT,
    name_updated_by TEXT,

    allowed_extensions TEXT NOT NULL, -- Comma-separated list: 'jpg,png,pdf'
    allowed_extensions_updated_at TEXT,
    allowed_extensions_updated_by TEXT,

    max_size INTEGER NOT NULL,      -- Maximum file size in bytes
    max_size_updated_at TEXT,
    max_size_updated_by TEXT,

    compression_level INTEGER NOT NULL DEFAULT 6, -- 0-9 (0=none, 9=max)
    compression_level_updated_at TEXT,
    compression_level_updated_by TEXT,

    -- Updated CHECK constraint and default value from migration
    compression_method TEXT DEFAULT 'lossless'
        CHECK(compression_method IN ('lossless', 'lossy', 'pdf_optimize', 'office_optimize', 'none')),
    compression_method_updated_at TEXT,
    compression_method_updated_by TEXT,

    min_size_for_compression INTEGER DEFAULT 10240, -- Don't compress if smaller (bytes)
    min_size_for_compression_updated_at TEXT,
    min_size_for_compression_updated_by TEXT,

    description TEXT,              -- Usage guidance for the type
    description_updated_at TEXT,
    description_updated_by TEXT,

    default_priority TEXT NOT NULL DEFAULT 'normal' CHECK(default_priority IN ('high', 'normal', 'low', 'never')), -- Sync priority hint
    default_priority_updated_at TEXT,
    default_priority_updated_by TEXT,

    icon TEXT,                   -- Icon identifier for UI (e.g., 'file-pdf', 'image')
    icon_updated_at TEXT,
    icon_updated_by TEXT,

    related_tables TEXT,           -- JSON array of table names where this type is typically used (for UI hints/filtering)
    related_tables_updated_at TEXT,
    related_tables_updated_by TEXT,

    -- Core sync metadata
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    created_by_user_id TEXT, -- User who defined this type
    updated_by_user_id TEXT, -- User who last modified this type definition

    deleted_at TEXT DEFAULT NULL, -- If document types can be deactivated/hidden
    deleted_by_user_id TEXT DEFAULT NULL,

    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (name_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (allowed_extensions_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (max_size_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (compression_level_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (compression_method_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (min_size_for_compression_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (description_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (default_priority_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (icon_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (related_tables_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Media/Documents Table -----------
-- This table was significantly restructured multiple times, latest on April 24, 2025
CREATE TABLE IF NOT EXISTS media_documents (
    id TEXT PRIMARY KEY NOT NULL,
    related_table TEXT NOT NULL,
    related_id TEXT NULL,            -- Nullable to support temporary documents (Migration 8)
    temp_related_id TEXT NULL,       -- For documents uploaded before entity creation (Migration 8, kept in Mig 12)
    type_id TEXT NOT NULL,
    original_filename TEXT NOT NULL, -- Renamed/Kept from Mig 11/12
    file_path TEXT NOT NULL,         -- Kept through Mig 11/12
    compressed_file_path TEXT NULL,  -- Kept through Mig 11/12
    compressed_size_bytes INTEGER NULL,-- Added Mig 11, Kept Mig 12
    field_identifier TEXT NULL,      -- Renamed/Kept from Mig 11/12 (was linked_field_name in Mig 7)
    title TEXT NULL,                 -- Kept through Mig 11/12
    description TEXT NULL,           -- Added Mig 11, Kept Mig 12
    mime_type TEXT NOT NULL,         -- Kept through Mig 11/12 (Made NOT NULL)
    size_bytes INTEGER NOT NULL,     -- Renamed/Kept from Mig 11/12 (Made NOT NULL)

    -- Error handling fields (Added Mig 12)
    has_error INTEGER NOT NULL DEFAULT 0,       -- Boolean flag for error state
    error_message TEXT NULL,                    -- Error details
    error_type TEXT NULL CHECK(error_type IS NULL OR error_type IN (
        'storage_failure', 'conversion_failure', 'compression_failure', 'sync_failure',
        'permission_failure', 'upload_failure', 'other'
    )),

    -- Status fields (Refined Mig 12)
    compression_status TEXT NOT NULL DEFAULT 'pending', -- Default changed from 'PENDING'
    blob_status TEXT NOT NULL DEFAULT 'pending', -- Renamed from blob_sync_status, default changed from 'PENDING'
    blob_key TEXT NULL,                     -- Renamed from blob_storage_key
    sync_priority TEXT NOT NULL DEFAULT 'normal' CHECK(sync_priority IN ('high', 'normal', 'low', 'never')), -- Changed to TEXT with CHECK, added Mig 7/12

    -- Sync tracking (Added Mig 12)
    last_sync_attempt_at TEXT NULL,
    sync_attempt_count INTEGER NOT NULL DEFAULT 0,

    -- Standard tracking fields
    created_at TEXT NOT NULL,
    updated_at TEXT NOT NULL,
    created_by_user_id TEXT NULL,
    updated_by_user_id TEXT NULL,
    deleted_at TEXT NULL,
    deleted_by_user_id TEXT NULL,

    FOREIGN KEY (type_id) REFERENCES document_types(id) ON DELETE RESTRICT, -- Changed from CASCADE in Mig 12
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by_user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (deleted_by_user_id) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Document Versions Table (Local Log) -----------
CREATE TABLE IF NOT EXISTS document_versions (
    id TEXT PRIMARY KEY,                -- UUID for this version entry
    document_id TEXT NOT NULL,          -- FK to media_documents.id
    version_number INTEGER NOT NULL,    -- Sequential version number (e.g., 1, 2, 3...)
    file_path TEXT NOT NULL,            -- Path to the file for this version (could be original or compressed)
    file_size INTEGER,                  -- Size of the file at this version
    is_compressed INTEGER DEFAULT 0,    -- 1 if this version represents a compressed file, 0 otherwise
    change_type TEXT NOT NULL CHECK(change_type IN ('original', 'compressed', 'modified', 'restored')), -- What action led to this version
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When this version record was created
    created_by_user_id TEXT,            -- User associated with the action creating this version

    FOREIGN KEY (document_id) REFERENCES media_documents(id) ON DELETE CASCADE, -- If document deleted, history goes too
    FOREIGN KEY (created_by_user_id) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Document Access Logs Table (Local Audit Log) -----------
CREATE TABLE IF NOT EXISTS document_access_logs (
    id TEXT PRIMARY KEY,                -- UUID for the log entry
    document_id TEXT NOT NULL,          -- FK to media_documents.id
    user_id TEXT NOT NULL,              -- FK to users.id (who accessed)
    access_type TEXT NOT NULL,          -- Type of access (CHECK constraint removed in Mig 12)
    access_date TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- Timestamp of access
    details TEXT,                       -- Optional JSON for extra info (e.g., IP if relevant, success/fail)

    FOREIGN KEY (document_id) REFERENCES media_documents(id) ON DELETE CASCADE, -- If doc deleted, access log may remain or cascade? Cascade seems ok.
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE -- If user deleted, their access log remains (cascade ok)
);

-- ----------- Compression Queue Table (Local State) -----------
CREATE TABLE IF NOT EXISTS compression_queue (
    id TEXT PRIMARY KEY,                -- UUID for the queue entry
    document_id TEXT NOT NULL UNIQUE,   -- FK to media_documents.id (Only one queue entry per doc)
    priority INTEGER DEFAULT 5,         -- Priority for processing (higher value = higher priority)
    attempts INTEGER DEFAULT 0,         -- Number of times processing was attempted
    status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'processing', 'completed', 'failed')), -- Current status
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When added to queue
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When status/attempts last changed
    error_message TEXT,                 -- Stores error if status is 'failed'

    FOREIGN KEY (document_id) REFERENCES media_documents(id) ON DELETE CASCADE -- If document deleted, remove from queue
);

-- ----------- Compression Stats Table (Local Aggregated State) -----------
CREATE TABLE IF NOT EXISTS compression_stats (
    id TEXT PRIMARY KEY CHECK(id = 'global'), -- Singleton row
    total_original_size BIGINT DEFAULT 0,     -- Sum of original sizes of compressed files
    total_compressed_size BIGINT DEFAULT 0,   -- Sum of compressed sizes
    space_saved BIGINT DEFAULT 0,             -- Difference: original - compressed
    compression_ratio REAL DEFAULT 0,         -- Average ratio: (space_saved / total_original_size) * 100
    total_files_compressed INTEGER DEFAULT 0, -- Count of successfully compressed files
    total_files_pending INTEGER DEFAULT 0,    -- Current count of files in the compression queue (status='pending')
    total_files_failed INTEGER DEFAULT 0,     -- Count of files that failed compression
    total_files_skipped INTEGER NOT NULL DEFAULT 0, -- Added in Mig 9
    last_compression_date TEXT,               -- Timestamp of the last successful compression
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')) -- When stats were last updated
);

-- ----------- App Settings Table -----------
CREATE TABLE IF NOT EXISTS app_settings (
    id TEXT PRIMARY KEY CHECK(id = 'global'), -- Singleton

    compression_enabled INTEGER DEFAULT 1,
    compression_enabled_updated_at TEXT,
    compression_enabled_updated_by TEXT,

    default_compression_timing TEXT DEFAULT 'immediate' CHECK(default_compression_timing IN ('immediate', 'background', 'manual')),
    default_compression_timing_updated_at TEXT,
    default_compression_timing_updated_by TEXT,

    background_service_interval INTEGER DEFAULT 300,
    background_service_interval_updated_at TEXT,
    background_service_interval_updated_by TEXT,

    -- Other settings... add _updated_at / _updated_by if they need to be synced via LWW

    last_background_run TEXT, -- Local state, not synced

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- Should only happen once
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- Metadata record updated
    created_by_user_id TEXT, -- Who initially set up settings?
    updated_by_user_id TEXT, -- Who last changed a synced setting

    FOREIGN KEY (compression_enabled_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (default_compression_timing_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (background_service_interval_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Sync Settings Table (User-specific, needs LWW) -----------
CREATE TABLE IF NOT EXISTS sync_settings (
    user_id TEXT PRIMARY KEY,

    max_file_size INTEGER DEFAULT 10485760,
    max_file_size_updated_at TEXT,
    max_file_size_updated_by TEXT,

    compression_enabled INTEGER DEFAULT 1,
    compression_enabled_updated_at TEXT,
    compression_enabled_updated_by TEXT,

    compression_timing TEXT DEFAULT 'immediate' CHECK(compression_timing IN ('immediate', 'background', 'manual')),
    compression_timing_updated_at TEXT,
    compression_timing_updated_by TEXT,

    -- Other settings... add _updated_at / _updated_by

    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When prefs created for user
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')), -- When prefs last updated

    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (max_file_size_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (compression_enabled_updated_by) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (compression_timing_updated_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Change Log Table (Tracks specific changes for sync) -----------
CREATE TABLE IF NOT EXISTS change_log (
    operation_id TEXT PRIMARY KEY, -- Unique ID for this specific change event (UUID)
    entity_table TEXT NOT NULL,    -- e.g., 'users', 'projects'
    entity_id TEXT NOT NULL,       -- The ID of the record changed
    -- Updated CHECK constraint from Mig 3
    operation_type TEXT NOT NULL CHECK (operation_type IN (
        'create',         -- Record created
        'update',         -- Field updated
        'delete',         -- Record soft deleted (set deleted_at)
        'hard_delete'     -- Record permanently deleted
       )),
    field_name TEXT,               -- Field name for 'update'. NULL otherwise.
    old_value TEXT,                -- Optional: Previous value (JSON encoded) for auditing/debugging
    new_value TEXT,                -- New value (JSON encoded) for 'create', 'update'. NULL for delete.
    timestamp TEXT NOT NULL,       -- High precision ISO8601 UTC timestamp of the change
    user_id TEXT NOT NULL,         -- User performing the change
    device_id TEXT,                -- Optional: ID of the device making the change (Present from initial schema)
    priority INTEGER DEFAULT 5,    -- Added in Mig 7
    document_metadata TEXT NULL,   -- Added in Mig 12

    -- Sync processing state
    sync_batch_id TEXT,            -- ID of the sync batch this belongs to (upload or download)
    processed_at TEXT,             -- Timestamp when this incoming change was merged locally
    sync_error TEXT,               -- If processing failed

    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL, -- User might be deleted later
    FOREIGN KEY (sync_batch_id) REFERENCES sync_batches(batch_id) ON DELETE SET NULL -- Link to sync batch
);

-- ----------- Sync Batches Table (Manages upload/download batches) -----------
CREATE TABLE IF NOT EXISTS sync_batches (
    batch_id TEXT PRIMARY KEY,          -- UUID for the batch
    device_id TEXT NOT NULL,            -- Added in Mig 4
    direction TEXT NOT NULL CHECK (direction IN ('upload', 'download')),
    status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'processing', 'completed', 'failed', 'partially_failed')),
    item_count INTEGER DEFAULT 0,       -- Number of change_log entries included
    total_size INTEGER DEFAULT 0,       -- Estimated size for network awareness
    priority INTEGER DEFAULT 5,         -- Maybe influence order of processing
    attempts INTEGER DEFAULT 0,
    last_attempt_at TEXT,
    error_message TEXT,                 -- Summary error if batch failed
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    completed_at TEXT
);

-- ----------- Audit Logs -----------
CREATE TABLE IF NOT EXISTS audit_logs (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    -- Updated CHECK constraint from Mig 3
    action TEXT NOT NULL CHECK (action IN (
        'create', 'update', 'delete', 'hard_delete', -- Corresponds to change_log operations
        'login_success', 'login_fail', 'logout', -- Auth events
        'sync_upload_start', 'sync_upload_complete', 'sync_upload_fail', -- Sync events
        'sync_download_start', 'sync_download_complete', 'sync_download_fail',
        'merge_conflict_resolved', 'merge_conflict_detected', -- Sync details
        'permission_denied', 'data_export', 'data_import' -- Other actions
        )),
    entity_table TEXT, -- Table related to action (users, projects...)
    entity_id TEXT,    -- Record ID related to action
    field_name TEXT,   -- Field related to action (if applicable)
    details TEXT,      -- JSON blob for extra context (e.g., error msg, IP address, change diff summary)
    timestamp TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE -- Audit remains even if user deleted? Maybe SET NULL?
);

-- ----------- Tombstones Table (Tracking hard deletes) -----------
-- Added in Mig 3, enhanced in Mig 12
CREATE TABLE IF NOT EXISTS tombstones (
    id TEXT PRIMARY KEY, -- UUID for the tombstone itself
    entity_id TEXT NOT NULL, -- UUID of the deleted entity
    entity_type TEXT NOT NULL, -- Table name of the deleted entity
    deleted_by TEXT NOT NULL, -- User ID who performed the deletion
    deleted_at TEXT NOT NULL, -- Timestamp when deletion occurred
    operation_id TEXT NOT NULL, -- UUID for batch operations
    additional_metadata TEXT NULL, -- Added in Mig 12

    FOREIGN KEY (deleted_by) REFERENCES users(id) ON DELETE SET NULL
);

-- ----------- Device Sync State Table -----------
-- Added in Mig 4
CREATE TABLE IF NOT EXISTS device_sync_state (
    device_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    last_upload_timestamp TEXT,
    last_download_timestamp TEXT,
    last_sync_status TEXT CHECK(last_sync_status IN ('success', 'partial_success', 'failed', 'in_progress')),
    last_sync_attempt_at TEXT,   -- When a sync was last attempted regardless of outcome
    server_version INTEGER DEFAULT 0,   -- To track server-side version vector
    sync_enabled INTEGER DEFAULT 1,     -- Allow disabling sync on specific devices
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),

    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- ----------- App Connection Settings Table -----------
-- Added in Mig 4
CREATE TABLE IF NOT EXISTS app_connection_settings (
    id TEXT PRIMARY KEY CHECK(id = 'cloud'),
    api_endpoint TEXT NOT NULL,   -- Base URL for your cloud API
    api_version TEXT,             -- API version for compatibility
    connection_timeout INTEGER DEFAULT 30000,   -- Timeout in milliseconds
    offline_mode_enabled INTEGER DEFAULT 0,
    retry_count INTEGER DEFAULT 3,              -- Number of retries on failure
    retry_delay INTEGER DEFAULT 5000,           -- Delay between retries
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))
);

-- ----------- Device Metadata Table -----------
-- Added in Mig 4
CREATE TABLE IF NOT EXISTS device_metadata (
    device_id TEXT PRIMARY KEY,
    name TEXT NOT NULL,          -- User-friendly device name
    platform TEXT NOT NULL,      -- iOS, iPadOS, macOS, etc.
    model TEXT,                  -- Device model information
    os_version TEXT,             -- OS version information
    app_version TEXT NOT NULL,   -- App version when last used
    last_active_at TEXT,         -- When the device was last active
    created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    updated_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))
);

-- ----------- Active File Usage Table -----------
-- Added in Mig 12
CREATE TABLE active_file_usage (
    id TEXT PRIMARY KEY,
    document_id TEXT NOT NULL,
    user_id TEXT NOT NULL,
    device_id TEXT NOT NULL,
    started_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    last_active_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    use_type TEXT NOT NULL DEFAULT 'view',
    FOREIGN KEY (document_id) REFERENCES media_documents(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE(document_id, user_id, device_id)
);

-- ----------- File Deletion Queue Table -----------
-- Added in Mig 12
CREATE TABLE file_deletion_queue (
    id TEXT PRIMARY KEY,
    document_id TEXT NOT NULL,       -- For reference, even after document record deleted
    file_path TEXT NOT NULL,         -- Original file to delete
    compressed_file_path TEXT NULL,  -- Compressed version if it exists
    requested_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    requested_by TEXT NOT NULL,
    grace_period_seconds INTEGER DEFAULT 86400,   -- 24 hours by default
    attempts INTEGER DEFAULT 0,
    last_attempt_at TEXT NULL,
    completed_at TEXT NULL,
    error_message TEXT NULL,
    FOREIGN KEY (requested_by) REFERENCES users(id) ON DELETE SET NULL
);

-- #############################################################
-- ##                      INDEXES                          ##
-- #############################################################

-- Indexes for users table
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_updated_at ON users(updated_at);
CREATE INDEX IF NOT EXISTS idx_users_deleted_at ON users(deleted_at);
CREATE INDEX IF NOT EXISTS idx_users_created_by ON users(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_users_updated_by ON users(updated_by_user_id);
CREATE INDEX IF NOT EXISTS idx_users_name ON users(name);

-- Indexes for status_types table
CREATE INDEX IF NOT EXISTS idx_status_types_value ON status_types(value);
CREATE INDEX IF NOT EXISTS idx_status_types_deleted_at ON status_types(deleted_at);

-- Indexes for strategic_goals table
CREATE INDEX IF NOT EXISTS idx_strategic_goals_status ON strategic_goals(status_id);
CREATE INDEX IF NOT EXISTS idx_strategic_goals_updated_at ON strategic_goals(updated_at);
CREATE INDEX IF NOT EXISTS idx_strategic_goals_deleted_at ON strategic_goals(deleted_at);
CREATE INDEX IF NOT EXISTS idx_strategic_goals_created_by ON strategic_goals(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_strategic_goals_updated_by ON strategic_goals(updated_by_user_id);
CREATE INDEX IF NOT EXISTS idx_strategic_goals_objective_code ON strategic_goals(objective_code);

-- Indexes for projects table
CREATE INDEX IF NOT EXISTS idx_projects_strategic_goal ON projects(strategic_goal_id);
CREATE INDEX IF NOT EXISTS idx_projects_status ON projects(status_id);
CREATE INDEX IF NOT EXISTS idx_projects_updated_at ON projects(updated_at);
CREATE INDEX IF NOT EXISTS idx_projects_deleted_at ON projects(deleted_at);
CREATE INDEX IF NOT EXISTS idx_projects_created_by ON projects(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_projects_updated_by ON projects(updated_by_user_id);
CREATE INDEX IF NOT EXISTS idx_projects_name ON projects(name);

-- Indexes for activities table
CREATE INDEX IF NOT EXISTS idx_activities_project ON activities(project_id);
CREATE INDEX IF NOT EXISTS idx_activities_status ON activities(status_id);
CREATE INDEX IF NOT EXISTS idx_activities_updated_at ON activities(updated_at);
CREATE INDEX IF NOT EXISTS idx_activities_deleted_at ON activities(deleted_at);
CREATE INDEX IF NOT EXISTS idx_activities_created_by ON activities(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_activities_updated_by ON activities(updated_by_user_id);

-- Indexes for participants table
CREATE INDEX IF NOT EXISTS idx_participants_location ON participants(location);
CREATE INDEX IF NOT EXISTS idx_participants_gender_age ON participants(gender, age_group);
CREATE INDEX IF NOT EXISTS idx_participants_updated_at ON participants(updated_at);
CREATE INDEX IF NOT EXISTS idx_participants_deleted_at ON participants(deleted_at);
CREATE INDEX IF NOT EXISTS idx_participants_created_by ON participants(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_participants_updated_by ON participants(updated_by_user_id);
CREATE INDEX IF NOT EXISTS idx_participants_name ON participants(name);

-- Indexes for workshops table (Reflecting state after nullable FK migration)
CREATE INDEX IF NOT EXISTS idx_workshops_project ON workshops(project_id);
CREATE INDEX IF NOT EXISTS idx_workshops_event_date ON workshops(event_date);
CREATE INDEX IF NOT EXISTS idx_workshops_location ON workshops(location);
CREATE INDEX IF NOT EXISTS idx_workshops_updated_at ON workshops(updated_at);
CREATE INDEX IF NOT EXISTS idx_workshops_deleted_at ON workshops(deleted_at);
CREATE INDEX IF NOT EXISTS idx_workshops_created_by ON workshops(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_workshops_updated_by ON workshops(updated_by_user_id);

-- Indexes for workshop_participants table (Reflecting state after 2024-04-20 migration)
CREATE INDEX IF NOT EXISTS idx_workshop_participants_workshop ON workshop_participants(workshop_id);
CREATE INDEX IF NOT EXISTS idx_workshop_participants_participant ON workshop_participants(participant_id);
CREATE INDEX IF NOT EXISTS idx_workshop_participants_updated_at ON workshop_participants(updated_at);
CREATE INDEX IF NOT EXISTS idx_workshop_participants_deleted_at ON workshop_participants(deleted_at);

-- Indexes for livelihoods table (Reflecting state after nullable FK migration)
CREATE INDEX IF NOT EXISTS idx_livelihoods_participant ON livelihoods(participant_id);
CREATE INDEX IF NOT EXISTS idx_livelihoods_project ON livelihoods(project_id);
CREATE INDEX IF NOT EXISTS idx_livelihoods_updated_at ON livelihoods(updated_at);
CREATE INDEX IF NOT EXISTS idx_livelihoods_deleted_at ON livelihoods(deleted_at);
CREATE INDEX IF NOT EXISTS idx_livelihoods_created_by ON livelihoods(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_livelihoods_updated_by ON livelihoods(updated_by_user_id);

-- Indexes for subsequent_grants table
CREATE INDEX IF NOT EXISTS idx_subsequent_grants_livelihood ON subsequent_grants(livelihood_id);
CREATE INDEX IF NOT EXISTS idx_subsequent_grants_date ON subsequent_grants(grant_date);
CREATE INDEX IF NOT EXISTS idx_subsequent_grants_updated_at ON subsequent_grants(updated_at);
CREATE INDEX IF NOT EXISTS idx_subsequent_grants_deleted_at ON subsequent_grants(deleted_at);
CREATE INDEX IF NOT EXISTS idx_subsequent_grants_created_by ON subsequent_grants(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_subsequent_grants_updated_by ON subsequent_grants(updated_by_user_id);

-- Indexes for donors table
CREATE INDEX IF NOT EXISTS idx_donors_name ON donors(name);
CREATE INDEX IF NOT EXISTS idx_donors_type ON donors(type);
CREATE INDEX IF NOT EXISTS idx_donors_country ON donors(country);
CREATE INDEX IF NOT EXISTS idx_donors_updated_at ON donors(updated_at);
CREATE INDEX IF NOT EXISTS idx_donors_deleted_at ON donors(deleted_at);
CREATE INDEX IF NOT EXISTS idx_donors_created_by ON donors(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_donors_updated_by ON donors(updated_by_user_id);

-- Indexes for project_funding table
CREATE INDEX IF NOT EXISTS idx_project_funding_project ON project_funding(project_id);
CREATE INDEX IF NOT EXISTS idx_project_funding_donor ON project_funding(donor_id);
CREATE INDEX IF NOT EXISTS idx_project_funding_status ON project_funding(status);
CREATE INDEX IF NOT EXISTS idx_project_funding_updated_at ON project_funding(updated_at);
CREATE INDEX IF NOT EXISTS idx_project_funding_deleted_at ON project_funding(deleted_at);
CREATE INDEX IF NOT EXISTS idx_project_funding_created_by ON project_funding(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_project_funding_updated_by ON project_funding(updated_by_user_id);

-- Indexes for document_types table
CREATE UNIQUE INDEX IF NOT EXISTS idx_document_types_name ON document_types(name) WHERE deleted_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_document_types_updated_at ON document_types(updated_at);
CREATE INDEX IF NOT EXISTS idx_document_types_deleted_at ON document_types(deleted_at);
CREATE INDEX IF NOT EXISTS idx_document_types_created_by ON document_types(created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_document_types_updated_by ON document_types(updated_by_user_id);

-- Indexes for media_documents table (Reflecting state after Mig 12)
CREATE INDEX IF NOT EXISTS idx_media_documents_related ON media_documents(related_table, related_id);
CREATE INDEX IF NOT EXISTS idx_media_documents_temp_related_id ON media_documents(temp_related_id) WHERE temp_related_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_media_documents_type ON media_documents(type_id);
CREATE INDEX IF NOT EXISTS idx_media_documents_compression ON media_documents(compression_status);
CREATE INDEX IF NOT EXISTS idx_media_documents_blob_sync ON media_documents(blob_status); -- Renamed from blob_sync_status
CREATE INDEX IF NOT EXISTS idx_media_documents_updated_at ON media_documents(updated_at);
CREATE INDEX IF NOT EXISTS idx_media_documents_deleted_at ON media_documents(deleted_at);
CREATE INDEX IF NOT EXISTS idx_media_documents_sync_priority ON media_documents(sync_priority); -- Added Mig 12
CREATE INDEX IF NOT EXISTS idx_media_documents_has_error ON media_documents(has_error); -- Added Mig 12
-- Indexes removed/replaced from initial schema: idx_media_documents_user, idx_media_documents_blob_sync (replaced), idx_media_documents_related_id (replaced by combined)
-- Added index idx_media_documents_related_id back in Mig 8 (kept conceptually in Mig 12)
CREATE INDEX IF NOT EXISTS idx_media_documents_related_id ON media_documents(related_id) WHERE related_id IS NOT NULL;

-- Indexes for document_versions table
CREATE INDEX IF NOT EXISTS idx_document_versions_document ON document_versions(document_id);
CREATE INDEX IF NOT EXISTS idx_document_versions_created_at ON document_versions(created_at);

-- Indexes for document_access_logs table
CREATE INDEX IF NOT EXISTS idx_document_access_logs_document ON document_access_logs(document_id);
CREATE INDEX IF NOT EXISTS idx_document_access_logs_user ON document_access_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_document_access_logs_date ON document_access_logs(access_date);
CREATE INDEX IF NOT EXISTS idx_document_access_logs_type ON document_access_logs(access_type); -- Added Mig 12

-- Indexes for compression_queue table
CREATE INDEX IF NOT EXISTS idx_compression_queue_pending ON compression_queue(status, priority DESC, created_at ASC) WHERE status = 'pending';
CREATE INDEX IF NOT EXISTS idx_compression_queue_document ON compression_queue(document_id); -- Covered by UNIQUE constraint

-- Indexes for change_log table
CREATE INDEX IF NOT EXISTS idx_change_log_entity ON change_log(entity_table, entity_id);
CREATE INDEX IF NOT EXISTS idx_change_log_timestamp_user ON change_log(timestamp, user_id);
CREATE INDEX IF NOT EXISTS idx_change_log_operation ON change_log(operation_type);
CREATE INDEX IF NOT EXISTS idx_change_log_batch ON change_log(sync_batch_id);
CREATE INDEX IF NOT EXISTS idx_change_log_unprocessed_for_upload
ON change_log(entity_table, entity_id, timestamp)
WHERE sync_batch_id IS NULL AND processed_at IS NULL;
-- Added in Mig 3
CREATE INDEX IF NOT EXISTS idx_change_log_hard_delete
ON change_log(entity_table, entity_id)
WHERE operation_type = 'hard_delete';

-- Indexes for sync_batches table
CREATE INDEX IF NOT EXISTS idx_sync_batches_status_priority ON sync_batches(status, priority, created_at);
CREATE INDEX IF NOT EXISTS idx_sync_batches_direction ON sync_batches(direction, status);
CREATE INDEX IF NOT EXISTS idx_sync_batches_device ON sync_batches(device_id, status); -- Added in Mig 4

-- Indexes for audit_logs table
CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs(timestamp);
CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);
CREATE INDEX IF NOT EXISTS idx_audit_logs_target ON audit_logs(entity_table, entity_id);

-- Indexes for tombstones table (Added Mig 3)
CREATE INDEX IF NOT EXISTS idx_tombstones_entity ON tombstones(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_tombstones_deleted_by ON tombstones(deleted_by);
CREATE INDEX IF NOT EXISTS idx_tombstones_deleted_at ON tombstones(deleted_at);
CREATE INDEX IF NOT EXISTS idx_tombstones_operation ON tombstones(operation_id);

-- Indexes for device_sync_state table (Added Mig 4)
CREATE INDEX IF NOT EXISTS idx_device_sync_state_user_id ON device_sync_state(user_id);
CREATE INDEX IF NOT EXISTS idx_device_sync_state_updated_at ON device_sync_state(updated_at);

-- Indexes for device_metadata table (Added Mig 4)
CREATE INDEX IF NOT EXISTS idx_device_metadata_last_active ON device_metadata(last_active_at DESC);

-- Indexes for active_file_usage table (Added Mig 12)
CREATE INDEX IF NOT EXISTS idx_active_file_usage_document ON active_file_usage(document_id);
CREATE INDEX IF NOT EXISTS idx_active_file_usage_user ON active_file_usage(user_id);
CREATE INDEX IF NOT EXISTS idx_active_file_usage_active ON active_file_usage(last_active_at);

-- Indexes for file_deletion_queue table (Added Mig 12)
CREATE INDEX IF NOT EXISTS idx_file_deletion_queue_pending ON file_deletion_queue(requested_at)
    WHERE completed_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_file_deletion_queue_document ON file_deletion_queue(document_id);

-- #############################################################
-- ##                  INITIAL DATA SEEDING                 ##
-- #############################################################

-- Initial seeding for status_types
INSERT OR IGNORE INTO status_types (id, value, created_at, updated_at) VALUES
    (1, 'On Track', strftime('%Y-%m-%dT%H:%M:%fZ', 'now'), strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    (2, 'At Risk', strftime('%Y-%m-%dT%H:%M:%fZ', 'now'), strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    (3, 'Delayed', strftime('%Y-%m-%dT%H:%M:%fZ', 'now'), strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    (4, 'Completed', strftime('%Y-%m-%dT%H:%M:%fZ', 'now'), strftime('%Y-%m-%dT%H:%M:%fZ', 'now'));

-- Initial seeding for compression_stats
INSERT OR IGNORE INTO compression_stats (id) VALUES ('global');

-- Initial seeding for app_settings
INSERT OR IGNORE INTO app_settings (id) VALUES ('global');

-- Note: Triggers are intentionally omitted as per the recommendation in the initial migration script.
-- Note: The locks table was dropped in Migration 3.