//
//  ProjectsView.swift
//  ActionAid SwiftUI
//
//  Projects management with basic functionality
//

import SwiftUI
import UniformTypeIdentifiers
import PhotosUI

// MARK: - Global Strategic Goals Cache
@MainActor
class StrategicGoalsCache: ObservableObject {
    static let shared = StrategicGoalsCache()
    
    @Published var goals: [StrategicGoalSummary] = []
    @Published var isLoading = false
    private var lastFetch: Date?
    private let cacheTimeout: TimeInterval = 300 // 5 minutes
    
    private init() {} // Singleton
    
    func loadIfNeeded(authManager: AuthenticationManager) async {
        // Return immediately if cache is fresh
        if let lastFetch = lastFetch,
           Date().timeIntervalSince(lastFetch) < cacheTimeout,
           !goals.isEmpty {
            print("📋 [CACHE] Using cached strategic goals (\(goals.count) items)")
            return
        }
        
        guard !isLoading else { 
            print("📋 [CACHE] Already loading strategic goals")
            return 
        }
        
        print("📋 [CACHE] Loading fresh strategic goals...")
        isLoading = true
        
        guard let currentUser = authManager.currentUser else {
            isLoading = false
            return
        }
        
        let authContext = AuthContextPayload(
            user_id: currentUser.userId,
            role: currentUser.role,
            device_id: authManager.getDeviceId(),
            offline_mode: false
        )
        
        let handler = StrategicGoalFFIHandler()
        let result = await handler.listSummaries(
            pagination: PaginationDto(page: 1, perPage: 50),
            auth: authContext
        )
        
        switch result {
        case .success(let paginatedResult):
            // Process mapping off main thread - now using lightweight response
            let summaries = paginatedResult.items.map { summary in
                StrategicGoalSummary(
                    id: summary.id,
                    objectiveCode: summary.objectiveCode,
                    outcome: nil // Not available in lightweight response
                )
            }
            
            await MainActor.run {
                self.goals = summaries
                self.lastFetch = Date()
                print("📋 [CACHE] ✅ Cached \(summaries.count) strategic goals")
            }
        case .failure(let error):
            print("📋 [CACHE] ❌ Failed to load strategic goals: \(error.localizedDescription)")
        }
        
        isLoading = false
    }
    
    func refresh(authManager: AuthenticationManager) async {
        lastFetch = nil
        await loadIfNeeded(authManager: authManager)
    }
    
    /// Force refresh cache (called when strategic goals are created/updated)
    func invalidateCache(authManager: AuthenticationManager) async {
        print("📋 [CACHE] ♻️ Invalidating cache due to strategic goal changes")
        lastFetch = nil
        goals.removeAll()
        await loadIfNeeded(authManager: authManager)
    }
    
    /// Called from strategic goal creation to keep cache fresh
    func notifyStrategicGoalCreated(_ newGoal: StrategicGoalResponse, authManager: AuthenticationManager) async {
        print("📋 [CACHE] ➕ Adding new strategic goal to cache: \(newGoal.objectiveCode)")
        
        let summary = StrategicGoalSummary(
            id: newGoal.id,
            objectiveCode: newGoal.objectiveCode,
            outcome: newGoal.outcome
        )
        
        await MainActor.run {
            // Add to existing cache
            self.goals.append(summary)
            
            // Sort by objective code for consistent ordering
            self.goals.sort { $0.objectiveCode < $1.objectiveCode }
            
            print("📋 [CACHE] ✅ Cache updated with new goal, total: \(self.goals.count)")
        }
    }
    
    /// Called from strategic goal updates to keep cache fresh  
    func notifyStrategicGoalUpdated(_ updatedGoal: StrategicGoalResponse) async {
        await MainActor.run {
            if let index = self.goals.firstIndex(where: { $0.id == updatedGoal.id }) {
                self.goals[index] = StrategicGoalSummary(
                    id: updatedGoal.id,
                    objectiveCode: updatedGoal.objectiveCode,
                    outcome: updatedGoal.outcome
                )
                print("📋 [CACHE] 🔄 Updated strategic goal in cache: \(updatedGoal.objectiveCode)")
            }
        }
    }
}

// MARK: - Main View
struct ProjectsView: View {
    @EnvironmentObject var authManager: AuthenticationManager
    @EnvironmentObject var sharedStatsContext: SharedStatsContext
    private let ffiHandler = ProjectFFIHandler()
    
    // Core data state
    @State private var projects: [ProjectResponse] = []
    @State private var isLoading = false
    @State private var searchText = ""
    @State private var selectedFilters: Set<String> = ["all"]
    
    // Project detail view state
    @State private var selectedProject: ProjectResponse?
    
    // CRUD sheet state
    @State private var showCreateSheet = false
    // Edit sheet state
    @State private var projectToEdit: ProjectResponse?
    
    // MARK: - Computed Properties
    
    /// Properly filtered projects with working OR gate logic for status filters
    var filteredProjects: [ProjectResponse] {
        projects.filter { project in
            let matchesSearch = searchText.isEmpty ||
                project.name.localizedCaseInsensitiveContains(searchText) ||
                (project.objective ?? "").localizedCaseInsensitiveContains(searchText) ||
                (project.outcome ?? "").localizedCaseInsensitiveContains(searchText) ||
                (project.responsibleTeam ?? "").localizedCaseInsensitiveContains(searchText)
            
            // OR gate logic for status filters
            let matchesStatus = selectedFilters.contains("all") ||
                (selectedFilters.contains("on_track") && project.statusId == 1) ||
                (selectedFilters.contains("at_risk") && project.statusId == 2) ||
                (selectedFilters.contains("delayed") && project.statusId == 3) ||
                (selectedFilters.contains("completed") && project.statusId == 4)
            
            return matchesSearch && matchesStatus
        }
    }
    
    /// Create auth context for API calls
    private func createAuthContext() -> AuthContextPayload {
        return AuthContextPayload(
            user_id: authManager.currentUser?.userId ?? "",
            role: authManager.currentUser?.role ?? "",
            device_id: authManager.getDeviceId(),
            offline_mode: false
        )
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Search bar
            HStack {
                TextField("Search projects...", text: $searchText)
                    .textFieldStyle(.roundedBorder)
                    .padding(.horizontal)
            }
            .padding(.vertical, 8)
            
            // Simple list view for now
            if isLoading {
                ProgressView("Loading projects...")
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else if filteredProjects.isEmpty {
                VStack(spacing: 16) {
                    Image(systemName: "folder")
                        .font(.system(size: 50))
                        .foregroundColor(.secondary)
                    Text("No projects found")
                        .font(.headline)
                        .foregroundColor(.secondary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else {
                List(filteredProjects) { project in
                    ProjectRowView(project: project)
                        .onTapGesture {
                            selectedProject = project
                        }
                }
            }
        }
        .navigationTitle("Projects")
        .navigationBarTitleDisplayMode(.large)
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Button(action: { 
                    showCreateSheet = true
                }) {
                    Image(systemName: "plus.circle.fill")
                        .font(.title3)
                }
            }
        }
        .sheet(isPresented: $showCreateSheet) {
            CreateProjectSheet { createdProject in
                // Add the new project to the list and refresh
                projects.append(createdProject)
                loadProjects() // Refresh to get updated data
            }
            .environmentObject(authManager)
        }
        .sheet(item: $projectToEdit) { project in
            EditProjectSheet(project: project, ffiHandler: self.ffiHandler) { updatedProject in
                // Update the project in the list immediately
                if let index = projects.firstIndex(where: { $0.id == updatedProject.id }) {
                    projects[index] = updatedProject
                }
                // Refresh to get any additional updated data
                loadProjects()
            }
            .environmentObject(authManager)
        }
        .fullScreenCover(item: $selectedProject) { project in
            ProjectDetailView(
                project: project, 
                onUpdate: {
                    loadProjects()
                }
            )
        }
        .onAppear {
            loadProjects()
        }
    }
    
    /// Load projects from backend
    private func loadProjects() {
        isLoading = true
        Task {
            guard let currentUser = authManager.currentUser else {
                await MainActor.run {
                    isLoading = false
                }
                return
            }
            
            let authContext = AuthContextPayload(
                user_id: currentUser.userId,
                role: currentUser.role,
                device_id: authManager.getDeviceId(),
                offline_mode: false
            )

            let result = await ffiHandler.list(
                pagination: PaginationDto(page: 1, perPage: 100), 
                include: [], 
                auth: authContext
            )
            
            await MainActor.run {
                isLoading = false
                switch result {
                case .success(let paginatedResult):
                    projects = paginatedResult.items
                case .failure(let error):
                    print("Failed to load projects: \(error.localizedDescription)")
                }
            }
        }
    }
}

// MARK: - Project Row Component
struct ProjectRowView: View {
    let project: ProjectResponse
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text(project.name)
                    .font(.headline)
                    .foregroundColor(.primary)
                
                Spacer()
                
                // Status badge
                Text(project.statusName)
                    .font(.caption)
                    .fontWeight(.medium)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 2)
                    .background(project.statusColor.opacity(0.2))
                    .foregroundColor(project.statusColor)
                    .cornerRadius(12)
            }
            
            if let objective = project.objective, !objective.isEmpty {
                Text(objective)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .lineLimit(2)
            }
            
            HStack {
                if let team = project.responsibleTeam, !team.isEmpty {
                    Label(team, systemImage: "person.2")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Text(formatDate(project.updatedAt))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding(.vertical, 4)
    }
    
    private func formatDate(_ dateString: String) -> String {
        let formatter = ISO8601DateFormatter()
        if let date = formatter.date(from: dateString) {
            let displayFormatter = DateFormatter()
            displayFormatter.dateStyle = .medium
            return displayFormatter.string(from: date)
        }
        return dateString
    }
}

// MARK: - Project Detail View
struct ProjectDetailView: View {
    // State so edits can update the view
    @State private var currentProject: ProjectResponse
    let onUpdate: () -> Void
    @Environment(\.dismiss) var dismiss
    @EnvironmentObject var authManager: AuthenticationManager
    
    // Edit sheet
    @State private var showEditSheet = false
    private let ffiHandler = ProjectFFIHandler()
    
    init(project: ProjectResponse, onUpdate: @escaping () -> Void) {
        _currentProject = State(initialValue: project)
        self.onUpdate = onUpdate
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // Header section
                    VStack(alignment: .leading, spacing: 12) {
                        Text(currentProject.name)
                            .font(.largeTitle)
                            .fontWeight(.bold)
                        
                        HStack {
                            Text(currentProject.statusName)
                                .font(.subheadline)
                                .fontWeight(.medium)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 4)
                                .background(currentProject.statusColor.opacity(0.2))
                                .foregroundColor(currentProject.statusColor)
                                .cornerRadius(16)
                            
                            Spacer()
                        }
                    }
                    
                    // Details section
                    VStack(alignment: .leading, spacing: 16) {
                        if let objective = currentProject.objective {
                            DetailRow(label: "Objective", value: objective)
                        }
                        
                        if let outcome = currentProject.outcome {
                            DetailRow(label: "Outcome", value: outcome)
                        }
                        
                        if let team = currentProject.responsibleTeam {
                            DetailRow(label: "Responsible Team", value: team)
                        }
                        
                        if let timeline = currentProject.timeline {
                            DetailRow(label: "Timeline", value: timeline)
                        }
                        
                        DetailRow(label: "Created", value: formatDate(currentProject.createdAt))
                        DetailRow(label: "Last Updated", value: formatDate(currentProject.updatedAt))
                    }
                }
                .padding()
            }
            .navigationTitle("Project Details")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Close") { dismiss() }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Menu {
                        Button("Edit") {
                            showEditSheet = true
                        }
                        Button("Delete", role: .destructive) {
                            // TODO: Show delete options
                        }
                    } label: {
                        Image(systemName: "ellipsis.circle")
                    }
                }
            }
            .sheet(isPresented: $showEditSheet) {
                EditProjectSheet(project: currentProject, ffiHandler: ffiHandler) { updatedProject in
                    // Update local state and notify parent
                    currentProject = updatedProject
                    onUpdate()
                }
                .environmentObject(authManager)
            }
        }
    }
    
    private func formatDate(_ dateString: String) -> String {
        let formatter = ISO8601DateFormatter()
        if let date = formatter.date(from: dateString) {
            let displayFormatter = DateFormatter()
            displayFormatter.dateStyle = .medium
            displayFormatter.timeStyle = .short
            return displayFormatter.string(from: date)
        }
        return dateString
    }
}

// MARK: - Create Project Sheet
struct CreateProjectSheet: View {
    @Environment(\.dismiss) var dismiss
    @EnvironmentObject var authManager: AuthenticationManager
    let onSave: (ProjectResponse) -> Void
    
    // Form fields
    @State private var name = ""
    @State private var objective = ""
    @State private var outcome = ""
    @State private var timeline = ""
    @State private var responsibleTeam = ""
    @State private var statusId: Int64 = 1 // Default to "On Track"
    @State private var strategicGoalId: String?
    @State private var syncPriority: SyncPriority = .normal
    
    // State management
    @State private var isLoading = false
    @State private var errorMessage: String?
    @FocusState private var focusedField: Field?
    
    private let ffiHandler = ProjectFFIHandler()
    
    enum Field: Hashable {
        case name, objective, outcome, timeline, responsibleTeam
    }
    
    var body: some View {
        NavigationStack {
            Form {
                Section("Basic Information") {
                    TextField("Project Name", text: $name)
                        .focused($focusedField, equals: .name)
                        .textInputAutocapitalization(.words)
                        .submitLabel(.next)
                        .disableAutocorrection(true)
                        .textFieldStyle(.plain)
                    
                    TextField("Objective (Optional)", text: $objective, axis: .vertical)
                        .focused($focusedField, equals: .objective)
                        .lineLimit(3...6)
                        .submitLabel(.next)
                        .disableAutocorrection(true)
                        .textFieldStyle(.plain)
                    
                    TextField("Outcome (Optional)", text: $outcome, axis: .vertical)
                        .focused($focusedField, equals: .outcome)
                        .lineLimit(3...6)
                        .submitLabel(.next)
                        .disableAutocorrection(true)
                        .textFieldStyle(.plain)
                }
                
                Section("Project Details") {
                    TextField("Timeline (Optional)", text: $timeline)
                        .focused($focusedField, equals: .timeline)
                        .submitLabel(.next)
                        .disableAutocorrection(true)
                        .textFieldStyle(.plain)
                    
                    TextField("Responsible Team (Optional)", text: $responsibleTeam)
                        .focused($focusedField, equals: .responsibleTeam)
                        .submitLabel(.done)
                        .disableAutocorrection(true)
                        .textFieldStyle(.plain)
                    
                    Picker("Status", selection: $statusId) {
                        Text("On Track").tag(Int64(1))
                        Text("At Risk").tag(Int64(2))
                        Text("Delayed").tag(Int64(3))
                        Text("Completed").tag(Int64(4))
                    }
                    .pickerStyle(.menu)
                }
                
                Section("Strategic Goal") {
                    if StrategicGoalsCache.shared.isLoading && StrategicGoalsCache.shared.goals.isEmpty {
                        HStack {
                            ProgressView()
                                .scaleEffect(0.8)
                            Text("Loading goals...")
                                .foregroundColor(.secondary)
                            Spacer()
                        }
                        .frame(height: 44) // Standard row height
                    } else {
                        Picker("Strategic Goal (Optional)", selection: $strategicGoalId) {
                            Text("No Strategic Goal").tag(String?.none)
                            ForEach(StrategicGoalsCache.shared.goals, id: \.id) { goal in
                                Text(goal.objectiveCode).tag(String?.some(goal.id))
                            }
                        }
                        .pickerStyle(.menu)
                    }
                }
                
                Section("Advanced") {
                    Picker("Sync Priority", selection: $syncPriority) {
                        Text("Low").tag(SyncPriority.low)
                        Text("Normal").tag(SyncPriority.normal)
                        Text("High").tag(SyncPriority.high)
                    }
                    .pickerStyle(.menu)
                }
                
                if let error = errorMessage {
                    Section {
                        Text(error)
                            .foregroundColor(.red)
                            .font(.caption)
                    }
                }
            }
            .navigationTitle("Create Project")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") { 
                        // Haptic feedback for better UX
                        UIImpactFeedbackGenerator(style: .light).impactOccurred()
                        dismiss() 
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Create") {
                        // Haptic feedback for better UX
                        UIImpactFeedbackGenerator(style: .medium).impactOccurred()
                        createProject()
                    }
                    .disabled(isLoading || name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
                }
            }
            .disabled(isLoading)
            .overlay {
                if isLoading {
                    Color.black.opacity(0.3)
                        .ignoresSafeArea()
                    ProgressView("Creating project...")
                        .scaleEffect(1.2)
                }
            }
        }
        .interactiveDismissDisabled(isLoading)
        .task {
            // Load strategic goals using cache (non-blocking)
            await StrategicGoalsCache.shared.loadIfNeeded(authManager: authManager)
        }
        .onAppear {
            // Delay focus to prevent UI hang on sheet open
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                focusedField = .name
            }
        }
    }
    
    private func createProject() {
        // Dismiss keyboard before starting creation
        focusedField = nil
        
        isLoading = true
        errorMessage = nil
        
        guard let currentUser = authManager.currentUser else {
            self.errorMessage = "User not authenticated."
            self.isLoading = false
            return
        }
        
        let authContext = AuthContextPayload(
            user_id: currentUser.userId,
            role: currentUser.role,
            device_id: authManager.getDeviceId(),
            offline_mode: false
        )
        
        let newProject = NewProject(
            strategicGoalId: strategicGoalId,
            name: name.trimmingCharacters(in: .whitespacesAndNewlines),
            objective: objective.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : objective.trimmingCharacters(in: .whitespacesAndNewlines),
            outcome: outcome.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : outcome.trimmingCharacters(in: .whitespacesAndNewlines),
            statusId: statusId,
            timeline: timeline.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : timeline.trimmingCharacters(in: .whitespacesAndNewlines),
            responsibleTeam: responsibleTeam.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : responsibleTeam.trimmingCharacters(in: .whitespacesAndNewlines),
            syncPriority: syncPriority,
            createdByUserId: currentUser.userId
        )
        
        Task {
            let result = await ffiHandler.create(newProject: newProject, auth: authContext)
            
            await MainActor.run {
                isLoading = false
                switch result {
                case .success(let createdProject):
                    // Success haptic feedback
                    UINotificationFeedbackGenerator().notificationOccurred(.success)
                    onSave(createdProject)
                    dismiss()
                case .failure(let error):
                    // Error haptic feedback
                    UINotificationFeedbackGenerator().notificationOccurred(.error)
                    errorMessage = "Failed to create project: \(error.localizedDescription)"
                }
            }
        }
    }
}

// MARK: - Edit Project Sheet
struct EditProjectSheet: View {
    @Environment(\.dismiss) var dismiss
    @EnvironmentObject var authManager: AuthenticationManager
    @StateObject private var goalsCache = StrategicGoalsCache.shared
    let project: ProjectResponse
    let ffiHandler: ProjectFFIHandler
    let onSave: (ProjectResponse) -> Void
    
    @State private var name = ""
    @State private var objective = ""
    @State private var outcome = ""
    @State private var timeline = ""
    @State private var responsibleTeam = ""
    @State private var statusId: Int64 = 1
    @State private var strategicGoalId: String?
    @State private var syncPriority: SyncPriority = .normal
    @State private var isLoading = false
    @State private var errorMessage: String?
    
    // Track original values to detect changes
    @State private var originalName = ""
    @State private var originalObjective = ""
    @State private var originalOutcome = ""
    @State private var originalTimeline = ""
    @State private var originalResponsibleTeam = ""
    @State private var originalStatusId: Int64 = 1
    @State private var originalStrategicGoalId: String?
    @State private var originalSyncPriority: SyncPriority = .normal
    
    // For focus management
    private enum Field: Hashable {
        case name, objective, outcome, timeline, responsibleTeam
    }
    @FocusState private var focusedField: Field?
    
    private var canSave: Bool {
        !name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty &&
        !isLoading
    }
    
    /// Check if any field values have actually changed
    private var hasChanges: Bool {
        name != originalName ||
        objective != originalObjective ||
        outcome != originalOutcome ||
        timeline != originalTimeline ||
        responsibleTeam != originalResponsibleTeam ||
        statusId != originalStatusId ||
        strategicGoalId != originalStrategicGoalId ||
        syncPriority != originalSyncPriority
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section("Basic Information") {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Project Name")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        TextField("Enter project name", text: $name)
                            .focused($focusedField, equals: .name)
                            .textInputAutocapitalization(.words)
                            .submitLabel(.next)
                            .disableAutocorrection(true)
                            .textFieldStyle(.plain)
                    }
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Objective (Optional)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        TextField("Describe the project objective", text: $objective, axis: .vertical)
                            .focused($focusedField, equals: .objective)
                            .lineLimit(3...6)
                            .submitLabel(.next)
                            .disableAutocorrection(true)
                            .textFieldStyle(.plain)
                    }
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Outcome (Optional)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        TextField("Describe expected outcomes", text: $outcome, axis: .vertical)
                            .focused($focusedField, equals: .outcome)
                            .lineLimit(3...6)
                            .submitLabel(.next)
                            .disableAutocorrection(true)
                            .textFieldStyle(.plain)
                    }
                }
                
                Section("Project Details") {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Timeline (Optional)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        TextField("Project timeline or duration", text: $timeline)
                            .focused($focusedField, equals: .timeline)
                            .submitLabel(.next)
                            .disableAutocorrection(true)
                            .textFieldStyle(.plain)
                    }
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Responsible Team (Optional)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        TextField("Team or person responsible", text: $responsibleTeam)
                            .focused($focusedField, equals: .responsibleTeam)
                            .submitLabel(.done)
                            .disableAutocorrection(true)
                            .textFieldStyle(.plain)
                    }
                    
                    Picker("Status", selection: $statusId) {
                        Text("On Track").tag(Int64(1))
                        Text("At Risk").tag(Int64(2))
                        Text("Delayed").tag(Int64(3))
                        Text("Completed").tag(Int64(4))
                    }
                    .pickerStyle(.menu)
                }
                
                Section("Strategic Goal") {
                    if goalsCache.isLoading && goalsCache.goals.isEmpty {
                        HStack {
                            ProgressView()
                                .scaleEffect(0.8)
                            Text("Loading goals...")
                                .foregroundColor(.secondary)
                            Spacer()
                        }
                        .frame(height: 44) // Standard row height
                    } else {
                        Picker("Strategic Goal (Optional)", selection: $strategicGoalId) {
                            Text("No Strategic Goal").tag(String?.none)
                            ForEach(goalsCache.goals, id: \.id) { goal in
                                Text(goal.objectiveCode).tag(String?.some(goal.id))
                            }
                        }
                        .pickerStyle(.menu)
                    }
                }
                
                Section("Advanced") {
                    Picker("Sync Priority", selection: $syncPriority) {
                        Text("Low").tag(SyncPriority.low)
                        Text("Normal").tag(SyncPriority.normal)
                        Text("High").tag(SyncPriority.high)
                    }
                    .pickerStyle(.menu)
                }
                
                if let error = errorMessage {
                    Section {
                        Text(error)
                            .foregroundColor(.red)
                            .font(.caption)
                    }
                }
            }
            .navigationTitle("Edit Project")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") { 
                        UIImpactFeedbackGenerator(style: .light).impactOccurred()
                        dismiss() 
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(hasChanges ? "Save" : "Done") {
                        UIImpactFeedbackGenerator(style: .medium).impactOccurred()
                        updateProject()
                    }
                    .disabled(!canSave)
                }
            }
            .disabled(isLoading)
            .overlay {
                if isLoading {
                    Color.black.opacity(0.3)
                        .ignoresSafeArea()
                    ProgressView("Updating project...")
                        .scaleEffect(1.2)
                }
            }
        }
        .interactiveDismissDisabled(isLoading)
        .task {
            // Load strategic goals using cache (likely already cached)
            await goalsCache.loadIfNeeded(authManager: authManager)
        }
        .onAppear {
            populateFields()
            focusedField = .name
        }
    }
    
    private func populateFields() {
        // Set current field values
        name = project.name
        objective = project.objective ?? ""
        outcome = project.outcome ?? ""
        timeline = project.timeline ?? ""
        responsibleTeam = project.responsibleTeam ?? ""
        statusId = project.statusId ?? 1
        strategicGoalId = project.strategicGoalId
        syncPriority = project.syncPriority
        
        // Store original values for change detection
        originalName = project.name
        originalObjective = project.objective ?? ""
        originalOutcome = project.outcome ?? ""
        originalTimeline = project.timeline ?? ""
        originalResponsibleTeam = project.responsibleTeam ?? ""
        originalStatusId = project.statusId ?? 1
        originalStrategicGoalId = project.strategicGoalId
        originalSyncPriority = project.syncPriority
    }
    
    private func updateProject() {
        // Dismiss keyboard before starting update
        focusedField = nil
        
        // Check if any changes were actually made
        if !hasChanges {
            // No changes detected, just dismiss without calling API or onSave
            UINotificationFeedbackGenerator().notificationOccurred(.success)
            dismiss()
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        guard let currentUser = authManager.currentUser else {
            self.errorMessage = "User not authenticated."
            self.isLoading = false
            return
        }
        
        let authContext = AuthContextPayload(
            user_id: currentUser.userId,
            role: currentUser.role,
            device_id: authManager.getDeviceId(),
            offline_mode: false
        )
        
        // Handle double optional for strategic goal - required for proper null handling
        let strategicGoalUpdate: String??
        if strategicGoalId != originalStrategicGoalId {
            // Strategic goal changed, send the new value (could be nil to unset)
            strategicGoalUpdate = .some(strategicGoalId)
        } else {
            // Strategic goal unchanged, don't update this field
            strategicGoalUpdate = .none
        }
        
        let updateProject = UpdateProject(
            strategicGoalId: strategicGoalUpdate,
            name: name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : name.trimmingCharacters(in: .whitespacesAndNewlines),
            objective: objective.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : objective.trimmingCharacters(in: .whitespacesAndNewlines),
            outcome: outcome.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : outcome.trimmingCharacters(in: .whitespacesAndNewlines),
            statusId: statusId,
            timeline: timeline.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : timeline.trimmingCharacters(in: .whitespacesAndNewlines),
            responsibleTeam: responsibleTeam.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? nil : responsibleTeam.trimmingCharacters(in: .whitespacesAndNewlines),
            syncPriority: syncPriority,
            updatedByUserId: currentUser.userId
        )
        
        Task {
            let result = await ffiHandler.update(id: project.id, update: updateProject, auth: authContext)
            
            await MainActor.run {
                isLoading = false
                switch result {
                case .success(let updatedProject):
                    // Success haptic feedback
                    UINotificationFeedbackGenerator().notificationOccurred(.success)
                    onSave(updatedProject)
                    dismiss()
                case .failure(let error):
                    // Error haptic feedback
                    UINotificationFeedbackGenerator().notificationOccurred(.error)
                    errorMessage = "Failed to update project: \(error.localizedDescription)"
                }
            }
        }
    }
}